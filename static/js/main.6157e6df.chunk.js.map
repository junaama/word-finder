{"version":3,"sources":["Components/Header/NavBar.js","Components/Synonym/Synonym.js","Components/Antonym/Antonym.js","Components/MeansLike/MeansLike.js","Components/Homophone/Homophone.js","Components/Rhyme/Rhyme.js","Components/Home/Home.js","Components/Main/Main.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","to","Synonym","props","results","data","map","item","i","key","word","Antonym","MeansLike","Homophone","Rhyme","Home","Main","useState","input","setInput","setData","constraint","setConstraint","history","useHistory","useEffect","a","url","fetch","res","json","makeApiCall","onSubmit","e","preventDefault","push","target","options","value","htmlFor","type","onChange","id","name","exact","path","component","render","Header","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6157e6df.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from 'react-router-dom';\n\n\nconst NavBar = () => {\n  return (\n    <div>\n      <nav>\n        <Link to=\"/home\" >Home</Link>{\" \"}\n        <Link to=\"/rel_syn\" >Synonym</Link>{\" \"}\n        <Link to=\"/rel_ant\" >Antonym</Link>{\" \"}\n        <Link to=\"/ml\" >Similar Meaning</Link>{\" \"}\n        <Link to=\"/rel_rhy\" >Rhyme</Link>{\" \"}\n        <Link to=\"/rel_hom\" >Homophone</Link>\n      </nav>\n      {/* <main>\n            In Main\n            <Switch>\n                <Route path='/' />\n                <Route path='/synonym' component={Synonym}/>\n                <Route path='/antonym' component={Antonym}/>\n                <Route path='/meanslike' component={MeansLike}/>\n                <Route path='/homophone' component={Homophone}/>\n                <Route path='/rhyme' component={Rhyme}/>\n            </Switch>\n        </main> */}\n    </div>\n  );\n};\nexport default NavBar;\n","import React from 'react';\n\nconst Synonym = (props) => {\n    let results;\n    if (props.data[0]) {\n      results = props.data.map((item, i) => {\n        return <p key={i}>Synonym: {item.word}</p>;\n      });\n    }\n    return (\n        <div>\n            In Synonym\n            {results}\n        </div>\n    )\n}\nexport default Synonym;","import React from 'react';\n\nconst Antonym = (props) => {\n    let results;\n    if (props.data[0]) {\n      results = props.data.map((item, i) => {\n        return <p key={i}>Antonym: {item.word}</p>;\n      });\n    }\n    return (\n        <div>\n            In Antonym\n            {results}\n        </div>\n    )\n}\nexport default Antonym;","import React from \"react\";\n\nconst MeansLike = (props) => {\n  let results;\n  if (props.data[0]) {\n    results = props.data.map((item, i) => {\n      return <p key={i}>Similar word: {item.word}</p>;\n    });\n  }\n\n  return (\n    <div>\n      In MeansLike\n      {results}\n    </div>\n  );\n};\nexport default MeansLike;\n","import React from 'react';\n\nconst Homophone = (props) => {\n    let results;\n    if (props.data[0]) {\n      results = props.data.map((item, i) => {\n        return <p key={i}>Homophone: {item.word}</p>;\n      });\n    }\n    return (\n        <div>\n            In Homophone\n            {results}\n        </div>\n    )\n}\nexport default Homophone;","import React from 'react';\n\nconst Rhyme = (props) => {\n    let results;\n    if (props.data[0]) {\n      results = props.data.map((item, i) => {\n        return <p key={i}>Rhyme: {item.word}</p>;\n      });\n    }\n    return (\n        <div>\n            In Rhyme\n            {results}\n        </div>\n    )\n}\nexport default Rhyme;","import React from 'react';\n\nconst Home = () => {\n    return (\n        <div>\n            In Home Component\n        </div>\n    )\n}\nexport default Home;","import React, { useState, useEffect } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Synonym from \"../Synonym/Synonym\";\nimport Antonym from \"../Antonym/Antonym\";\nimport MeansLike from \"../MeansLike/MeansLike\";\nimport Homophone from \"../Homophone/Homophone\";\nimport Rhyme from \"../Rhyme/Rhyme\";\nimport Home from \"../Home/Home\";\n\nconst Main = () => {\n  let [input, setInput] = useState(\"\");\n  let [data, setData] = useState([]);\n  let [constraint, setConstraint] = useState(\"\");\n\n  // let results;\n  const history = useHistory();\n\n\n\n  useEffect(() => {\n      const makeApiCall = async () => {\n    const url = `https://api.datamuse.com/words?${constraint}=${input}`;\n    const res = await fetch(url);\n    const data = await res.json();\n    setData(data);\n  };\n    makeApiCall();\n  }, [input, constraint]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    history.push(`/${e.target.options.value}`)\n  };\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n  const handleSelectChange = (e) => {\n    setConstraint(e.target.value);\n  };\n\n  // if (constraint) {\n  //   switch (handler) {\n  //     case \"ml\":\n  //       results = data.map((item, i) => {\n  //         return <p key={i}>Similar word: {item.word}</p>;\n  //       });\n  //       break;\n  //     case \"rel_ant\":\n  //       results = data.map((item, i) => {\n  //         if (!item) {\n  //           console.log(\"dne\");\n  //         }\n  //         return <p key={i}>Antonym: {item.word}</p>;\n  //       });\n  //       break;\n  //     case \"rel_syn\":\n  //       results = data.map((item, i) => {\n  //         return <p key={i}>Synonym: {item.word}</p>;\n  //       });\n  //       break;\n  //     case \"rel_rhy\":\n  //       results = data.map((item, i) => {\n  //         return <p key={i}>Rhyme: {item.word}</p>;\n  //       });\n  //       break;\n  //     case \"rel_hom\":\n  //       results = data.map((item, i) => {\n  //         return <p key={i}>Homophone: {item.word}</p>;\n  //       });\n  //       break;\n  //     default:\n  //       console.log(\"default\");\n  //   }\n  // } else {\n  //   console.log(\"DNE\");\n  // }\n  //     return (\n  //       <div>\n  //         <form onSubmit={handleSubmit}>\n  //             <label htmlFor=\"userWord\">Word: </label>\n  //           <input type=\"text\" onChange={handleChange} id=\"userWord\"></input>\n  //           <select name=\"options\" id=\"options\" onChange={handleSelectChange}>\n  //             <option value=\"null\">Select an option</option>\n  //             <option value=\"ml\">Find Meaning Similar To</option>\n  //             <option value=\"rel_syn\">Find Synonyms</option>\n  //             <option value=\"rel_ant\">Find Antonyms</option>\n  //             <option value=\"rel_rhy\">Find Rhymes</option>\n  //             <option value=\"rel_hom\">Find Homophones</option>\n  //           </select>\n  //           <input type=\"submit\" value=\"Search\" />\n  //         </form>\n  //         Results: {mlResults} {synResults} {antResults} {rhyResults} {homResults}\n\n  //       </div>\n  //     );\n  //   };\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"userWord\">Word: </label>\n          <input type=\"text\" onChange={handleChange} id=\"userWord\"></input>\n          <select name=\"options\" id=\"options\" onChange={handleSelectChange}>\n            <option value=\"null\">Select an option</option>\n            <option value=\"ml\">Find Meaning Similar To</option>\n            <option value=\"rel_syn\">Find Synonyms</option>\n            <option value=\"rel_ant\">Find Antonyms</option>\n            <option value=\"rel_rhy\">Find Rhymes</option>\n            <option value=\"rel_hom\">Find Homophones</option>\n          </select>\n          <input type=\"submit\" value=\"Search\" />\n        </form>\n        {/* Results: {results} */}\n      </div>\n      <main>\n        <Switch>\n          <Route exact path=\"/home\" component={Home} />\n          <Route path=\"/rel_syn\" render={props => <Synonym {...props} data={data}/>} />\n          <Route path=\"/rel_ant\" render={props => <Antonym {...props} data={data}/>} />\n          <Route path=\"/ml\" render={props => <MeansLike {...props} data={data}/>} />\n          <Route path=\"/rel_hom\" render={props => <Homophone {...props} data={data}/>} />\n          <Route path=\"/rel_rhy\" render={props => <Rhyme {...props} data={data}/>}/>\n        </Switch>\n      </main>\n    </>\n  );\n};\nexport default Main;\n","import React from 'react';\nimport NavBar from './NavBar.js'\nimport Main from '../Main/Main'\nconst Header = () => {\n\n    return (\n        <div>\n            <NavBar />\n            <Main />\n        </div>\n        \n\n    )\n}\nexport default Header;","import React from 'react';\nimport Header from './Components/Header/Header';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n     <h1>Word Finder</h1>\n     <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}